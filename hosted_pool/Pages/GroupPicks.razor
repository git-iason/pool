@using hosted_pool.Data


<style>
    table {
        border: 0px;
        border-collapse: collapse;
        border-spacing: 0;
        table-layout: fixed;
    }

    td, th {
        border: 0px;
        text-align: left;
        padding-right: 3px;
        padding-left: 3px;
        padding-bottom: 0px;
        margin: 2px;
        white-space: nowrap;
    }

    /*            tr:nth-child(even) {
                        background-color: #dddddd;
                    }*/
</style>
<table>
    @*<thead>
            <tr>
                <th width="25px"></th>
                <th width="50px">Confidence</th>
            </tr>
        </thead>*@
    <tbody>

        @code{
            string clr = "background-color: #D1D1D1";
            bool alternate = false;
        }

        <tr>
            <td> </td>
            @foreach (var e in maxPointList)
            {
                var color = e.Item1.Equals(userPickSet) ? "background-color: #BDEE63" : "";
                <td style="@color">@e.Item1</td>
            }
        </tr>
        @for (var c = 0; c < possiblesRow.Count; c++)
        {

            var back_color = alternate ? "background-color: #EAEAEA" : "background-color: #A0A0A0";
            alternate = !alternate;
            for (var i = 0; i < possiblesRow[c].Count; i++)
            {
                var p = possiblesRow[c][i];
                var border = "";
                if (i == possiblesRow[c].Count - 1) border = "border-bottom: 3px solid black;";


                var strike = possiblesRow[c][i].Item2 ? "text-decoration: line-through;font-size: larger" : "font-size: larger";
                //if (!possiblesRow[c][i].Item2)
                {
                    <tr style="@border;@back_color;@strike;">
                        <td style="border-right: 3px solid black"><b>@possiblesRow[c][i].Item1</b></td>

                        @foreach (var entry in maxPointList)
                        {
                            var realEntry = pickRows[entry.Item1];
                            var content = possiblesRow[c][i].Item2 ? " " : realEntry[c][i].Item1;
                            var color = entry.Item1.Equals(userPickSet) ? "background-color: #BDEE63" : "";
                            <td style="@color;text-align:center">@content</td>
                        }
                    </tr>
                }
            }

        }

        @code
                {string color = "background-color: #F3FCA3";
        }

    </tbody>
</table>

@code {

    [Parameter]
    public Dictionary<string, string> picks { get; set; } = null;

    [Parameter]
    public string email { get; set; } = "no@name";

    [Parameter]
    public Pool pool { get; set; } = null;

    public List<Tuple<string, int>> roundRow = new List<Tuple<string, int>>();
    public List<Tuple<string, int>> gameRow = new List<Tuple<string, int>>();

    public List<List<Tuple<string, bool>>> possiblesRow = new List<List<Tuple<string, bool>>>();
    public Dictionary<string, List<List<Tuple<string, bool>>>> pickRows = new Dictionary<string, List<List<Tuple<string, bool>>>>();
    public List<Tuple<string, int>> maxPointList = new List<Tuple<string, int>>();
    private string userPickSet = "";

    protected override async Task OnInitializedAsync()
    {
        BuildData();
    }

    private void BuildData()
    {
        if (picks != null && pool != null)
        {
            var buildHeader = true;
            foreach (var p in picks)
            {
                pool.LoadPicks(p.Value);
                var l = new List<List<Tuple<string, bool>>>();

                var points = new List<Tuple<string, bool>>();
                points.Add(new Tuple<string, bool>(pool.max_points.ToString(), false));
                var total = new List<Tuple<string, bool>>();

                total.Add(new Tuple<string, bool>("Max Points", false));
                if (buildHeader)
                    possiblesRow.Add(total);

                l.Add(points);

                foreach (var r in pool.rounds)
                {
                    var colspan = r.games.SelectMany(l => l.possibleWinners).Count();
                    if (buildHeader) roundRow.Add(new Tuple<string, int>(r.name, colspan));
                    int c = 0;

                    foreach (var g in r.games)
                    {
                        if (buildHeader) gameRow.Add(new Tuple<string, int>(g.num.ToString(), g.possibleWinners.Count()));
                        var tg = new List<Tuple<string, bool>>();
                        var possibles = new List<Tuple<string, bool>>();
                        foreach (var w in g.possibleWinners)
                        {
                            if (buildHeader) possibles.Add(new Tuple<string, bool>(w.name, w.eliminated));
                            tg.Add(new Tuple<string, bool>(w.confidencePickStr, w.eliminated));
                        }
                        if (p.Key.Equals(email))
                        {
                            userPickSet = pool.pickSetAbbr;
                        }

                        l.Add(tg);

                        if (buildHeader) possiblesRow.Add(possibles);
                    }
                }


                l.Add(points);
                if (l.Count > 0) pickRows.Add(pool.pickSetAbbr, l);

                if (buildHeader)
                    possiblesRow.Add(total);

                //foreach (var tb in pool.tiebreakers)
                //{
                //    var possibles = new List<Tuple<string, bool>>();
                //    var tg = new List<Tuple<string, bool>>();
                //    if (buildHeader) possibles.Add(new Tuple<string, bool>(tb.question, false));
                //    tg.Add(new Tuple<string, bool>(tb.answer, false));
                //    l.Add(tg);

                //    if (buildHeader) possiblesRow.Add(possibles);
                //}




                buildHeader = false;
                maxPointList.Add(new Tuple<string, int>(pool.pickSetAbbr, pool.max_points));
            }

        }
        maxPointList.Sort((x, y) => y.Item2.CompareTo(x.Item2));

    }
}

