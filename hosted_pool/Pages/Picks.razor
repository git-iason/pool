@page "/pool"

<PageTitle>Pool</PageTitle>

@using hosted_pool.Data
@inject PoolService PoolService

@if (_pool == null)
{
    <p><em>Loading...</em></p>
}
else
{

   var rounds = _pool.rounds;
    @for(var r = 0; r < rounds.Count(); r++)
    {
        <b>@rounds[r].name</b>
        <table class="table">
            <thead>
                <tr>
                    <th>game</th>
                    <th>confidence</th>
                </tr>
            </thead>
            <tbody>

                @for (int g = 0; g < rounds[r].games.Count(); g++)
                {
                    @for (var w =0; w < rounds[r].games[g].possibleWinners.Count(); w++)
                        {
                            var text = $"{rounds[r].games[g].possibleWinners[w].name}({r}.{g}.{w})";
                        <tr>
                            <td>@text</td>
                            <td><select class="custom-select" title="Confidence" @onchange="OnValueChanged">
                                <option value="Select" selected disabled="disabled">(Confidence)</option>
                                @for (var c = 1; c <= rounds[r].games[g].possibleWinners.Count(); c++)
                                    {
                                        var t = $"{r}:{g}:{w}:{c}";
                                    <option value=@t>@c</option>
                                }
                            </select></td>
                        </tr>
                    }
                    <tr><td>-----------</td></tr>
                }
            </tbody>
        </table>
    }
}



@code {
    private Pool? _pool;

    protected override async Task OnInitializedAsync()
    {
        _pool = await PoolService.Get();
    }
    [Parameter]
    public EventCallback<string[]> ValueChanged
    {
        get;
        set;
    }
    private Task OnValueChanged(ChangeEventArgs args)
    {
        var t = args.Value.ToString().Split(':');

        return ValueChanged.InvokeAsync(t);
    }
}