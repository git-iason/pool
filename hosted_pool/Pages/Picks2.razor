@*@page "/{poolId:int?}"*@
@page "/"
<PageTitle>Pool</PageTitle>

@using hosted_pool.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@inject PoolService PoolService
@inject AuthenticationStateProvider aspService
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager nav
<EditForm EditContext="@EditContext">
    <DataAnnotationsValidator />
    @((MarkupString)@_pool.welcomeStr)
    @if (_pool == null)
    {
        <p><em>Loading</em></p>
    }
    else if (!state.User.Identity.IsAuthenticated)
    {

        <form method="post" class="form-horizontal" action="Identity/Account/ExternalLogin?returnUrl=%2F">
            <div>

                <button type="submit" class="nav-link btn btn-link" name="provider" value="Google">Please log in with Google to view the bracket</button>


            </div>
        </form>
    }
    else if (submited && _pool.IsComplete())
    {
        <p>Your picks have been submitted</p>
        <button type="button" onclick="@edit">Edit picks</button>
    }
    else
    {
        @if (!_pool.IsComplete())
        {
            <p><label style="color: red">Picks are incomplete! Please make all entries and click submit!</label></p>
        }
        @if (_poolClosed)
        {
            <p><label style="color: red">@_poolMessage</label></p>
        }
        submited = false;


        var rounds = _pool.rounds;
        <label><b>Name:</b> </label>
        <input @bind="@_pool.pickSet" placeholder="Your Name" /><br />

        @foreach (var r in rounds)
        {
            <b>@r.name</b>
            <table class="table">
                <thead>
                    <tr>
                        <th>game</th>
                        <th>confidence</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var g in r.games)
                    {
                        @foreach (var w in g.possibleWinners)
                        {
                            var text = $"{w.name}";
                            <tr>
                                <td style="font-size: larger">@text</td>
                                <td>
                                    <select @bind="@w.confidencePickStr" disabled="@_poolClosed">
                                        <option value="Select" selected disabled="disabled">Confidence</option>
                                        @for (var c = 1; c <= g.possibleWinners.Count(); c++)
                                        {
                                            <option value="@c">@c</option>
                                        }
                                    </select>
                                    @if (w.confidencePick == 0)
                                    {
                                        <label style="color: red; font-size: x-large">  !</label>
                                    }
                                </td>
                            </tr>
                        }
                        <tr style="background-color: #ddd"><td colspan="2"> </td></tr>
                    }

                </tbody>
            </table>
        }
        <b>Tiebeakers</b>
        <table class="table">
            @foreach (var t in _pool.tiebreakers)
            {

                <tr>
                    <td colspan="2">@t.question</td>
                </tr>
                <tr>
                    <td colspan="2">
                        <input @bind="@t.answer" />
                        @if (t.answer == "")
                        {
                            <label style="color: red; font-size: x-large">!</label>
                        }
                    </td>
                </tr>

            }
        </table>
        <button type="button" onclick="@shipit"> submit</button><br /><br />
        @if (!_pool.IsComplete())
        {
            <p><label style="color: red">Picks are incomplete! Please make all entries and click submit!</label></p>
        }

    }

</EditForm>

@code {
    private EditContext EditContext;
    private Pool? _pool;
    private AuthenticationState state;
    private int userIndex = -1;
    public bool submited { get; set; } = false;
    public string _email = "";
    private string _poolMessage = "";
    private bool _poolClosed = false;
    protected override async Task OnInitializedAsync()
    {
        PoolName = PoolName ?? "nfl";

        state = await aspService.GetAuthenticationStateAsync();

        var user = state.User.ToString();
        if (state.User.Identity.IsAuthenticated)
        {

            _email = state.User.Claims.FirstOrDefault(x => x.Type == System.Security.Claims.ClaimTypes.Email).Value.ToString();
            var name = state.User.Claims.FirstOrDefault(x => x.Type == System.Security.Claims.ClaimTypes.Name).Value.ToString();

            var name_parts = name.Split(".");
            var first = name_parts.Length >= 1 ? name_parts[0] : "No Name";
            var last = name_parts.Length >= 2 ? name_parts[1] : "NoLastName";
            var new_name = $"{first} {last}";
            _pool = await PoolService.Get(PoolName, _email, out userIndex);
            if (_pool != null  && _pool.pickSet == "")
                _pool.pickSet = new_name;
        }
        else
        {
            _pool = await PoolService.Get(PoolName, "", out userIndex);
        }

        //EditContext.OnFieldChanged += EditContext_OnFieldChanged;

        if (_pool != null)
        {
            EditContext = new EditContext(_pool);
            _poolClosed = !_pool.isLive(out _poolMessage);
        }
        else
        {
        }
        await base.OnInitializedAsync();
    }

    private async void edit()
    {
        submited = false;
    }
    private async void shipit()
    {
        var s = state.User.Claims.ToList();
        PoolService.Put(PoolName, _pool, _email, userIndex);
        submited = true;
        nav.NavigateTo($"/?pool={PoolName}");
    }



    [SupplyParameterFromQuery(Name = "pool")]
    [Parameter]
    public string PoolName { get; set; } = "";

    //[Parameter]
    //public int PoolId { get; set; } = 0;
}