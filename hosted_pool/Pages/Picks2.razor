@page "/"

<PageTitle>Pool</PageTitle>

@using hosted_pool.Data
@inject PoolService PoolService
@inject AuthenticationStateProvider aspService

<EditForm EditContext="@EditContext">
    <DataAnnotationsValidator />

    @if (_pool == null)
    {
        <p><em>Log in to view pool!</em></p>
    }
    else
    {
        var rounds = _pool.rounds;
        @foreach (var r in rounds)
        {
            <b>@r.name</b>
            <table class="table">
                <thead>
                    <tr>
                        <th>game</th>
                        <th>confidence</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var g in r.games)
                    {
                        @foreach (var w in g.possibleWinners)
                        {
                            var text = $"{w.name}";
                            <tr>
                                <td>@text</td>
                                <td>
                                    <select @bind="@w.confidencePickStr">
                                        <option value="Select" selected disabled="disabled">Confidence</option>
                                        @for (var c = 1; c <= g.possibleWinners.Count(); c++)
                                        {
                                            <option value="@c">@c</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        }
                        <tr><td>-----------</td></tr>
                    }
                </tbody>
            </table>
        }
        <button type="button" onclick="@shipit">ship it!</button>
    }

</EditForm>

    @code {
        private EditContext EditContext;
        private Pool? _pool;
        private AuthenticationState state;
        protected override async Task OnInitializedAsync()
        {
            state = await aspService.GetAuthenticationStateAsync();
            var user = state.User.ToString();
            if (state.User.Identity.IsAuthenticated)
            {
                _pool = await PoolService.Get();

                EditContext = new EditContext(_pool);
            }
            else
            {
                _pool = null;
                EditContext = new EditContext(new object());
            }
            //EditContext.OnFieldChanged += EditContext_OnFieldChanged;
            
            await base.OnInitializedAsync();
        }

        private async void shipit()
        {

            PoolService.Put(_pool, state.User.Identity.Name);
        }
        }
